<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sweet Shop</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://unpkg.com/jwt-decode@4.0.0/build/jwt-decode.umd.js"></script>
    <style>
        body {
            background-color: #fdf2f8; /* A light pink background for a sweet theme */
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect, createContext, useContext } = React;
        const jwtDecode = window.jwt_decode;

        const AuthContext = createContext(null);

        // --- Auth Provider ---
        function AuthProvider({ children }) {
            const [user, setUser] = useState(null);
            const [token, setToken] = useState(localStorage.getItem('token'));
            const [loading, setLoading] = useState(true);

            useEffect(() => {
                try {
                    if (token) {
                        const decodedUser = jwtDecode(token);
                        // Check if token is expired
                        if (decodedUser.exp * 1000 > Date.now()) {
                           setUser(decodedUser);
                        } else {
                            // Token expired, clear it
                            localStorage.removeItem('token');
                            setToken(null);
                            setUser(null);
                        }
                    }
                } catch (error) {
                    console.error("Invalid token:", error);
                    localStorage.removeItem('token');
                    setToken(null);
                    setUser(null);
                } finally {
                    setLoading(false);
                }
            }, [token]);

            const login = (newToken) => {
                localStorage.setItem('token', newToken);
                setToken(newToken);
            };

            const logout = () => {
                localStorage.removeItem('token');
                setToken(null);
                setUser(null);
            };

            const value = { user, login, logout, token, isAuthenticated: !!user };

            if (loading) return <div className="flex justify-center items-center h-screen"><div className="text-2xl">Loading...</div></div>;

            return (
                <AuthContext.Provider value={value}>
                    {children}
                </AuthContext.Provider>
            );
        }

        function useAuth() {
            return useContext(AuthContext);
        }

        // --- API Helper ---
        const API_BASE_URL = 'http://localhost:5001/api';

        const api = {
            async get(endpoint, token) {
                const res = await fetch(`${API_BASE_URL}${endpoint}`, {
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                if (!res.ok) throw new Error('Network response was not ok');
                return res.json();
            },
            async post(endpoint, body, token) {
                 const res = await fetch(`${API_BASE_URL}${endpoint}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        ...(token && { 'Authorization': `Bearer ${token}` }),
                    },
                    body: JSON.stringify(body)
                });
                 if (!res.ok) {
                    const errorData = await res.json();
                    throw new Error(errorData.message || 'An error occurred');
                 }
                return res.json();
            }
        };


        // --- SweetCard Component ---
        function SweetCard({ sweet, onPurchase }) {
            const { token } = useAuth();
            const isOutOfStock = sweet.quantity === 0;

            const handlePurchase = async () => {
                try {
                    await api.post(`/sweets/${sweet.id}/purchase`, {}, token);
                    alert(`${sweet.name} purchased!`);
                    onPurchase();
                } catch (error) {
                    alert(`Failed to purchase: ${error.message}`);
                }
            };
            
            return (
                <div className="border rounded-lg p-4 shadow-lg bg-white transform hover:scale-105 transition-transform duration-300">
                    <h3 className="text-xl font-bold text-pink-600">{sweet.name}</h3>
                    <p className="text-gray-500">{sweet.category}</p>
                    <p className="text-lg font-semibold my-2">${sweet.price.toFixed(2)}</p>
                    <p className="text-sm font-medium text-gray-700">In Stock: {sweet.quantity}</p>
                    <button
                        onClick={handlePurchase}
                        disabled={isOutOfStock}
                        className={`mt-4 w-full px-4 py-2 text-white font-bold rounded-lg shadow-md transition-colors
                          ${isOutOfStock 
                            ? 'bg-gray-400 cursor-not-allowed' 
                            : 'bg-pink-500 hover:bg-pink-700'}`}
                    >
                        {isOutOfStock ? 'Out of Stock' : 'Purchase'}
                    </button>
                </div>
            );
        }

        // --- Dashboard Component ---
        function Dashboard() {
            const [sweets, setSweets] = useState([]);
            const [loading, setLoading] = useState(true);
            const { token } = useAuth();

            const loadSweets = async () => {
                try {
                    setLoading(true);
                    const data = await api.get('/sweets', token);
                    setSweets(data);
                } catch (error) {
                    console.error("Failed to fetch sweets:", error);
                } finally {
                    setLoading(false);
                }
            };

            useEffect(() => {
                if (token) {
                    loadSweets();
                }
            }, [token]);

            if (loading) return <div className="text-center p-8">Loading sweets... üç¨</div>;

            return (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {sweets.map((sweet) => (
                        <SweetCard key={sweet.id} sweet={sweet} onPurchase={loadSweets} />
                    ))}
                </div>
            );
        }

        // --- Login Component ---
        function LoginPage() {
            const [email, setEmail] = useState('');
            const [password, setPassword] = useState('');
            const [error, setError] = useState('');
            const { login } = useAuth();

            const handleSubmit = async (e) => {
                e.preventDefault();
                setError('');
                try {
                    const data = await api.post('/auth/login', { email, password });
                    login(data.token);
                } catch (err) {
                    setError(err.message || 'Failed to login. Please check your credentials.');
                }
            };

            return (
                <div className="flex items-center justify-center min-h-screen">
                    <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow-xl">
                        <h2 className="text-3xl font-bold text-center text-pink-600">Welcome Back!</h2>
                        <form onSubmit={handleSubmit} className="space-y-6">
                            {error && <p className="text-red-500 text-center">{error}</p>}
                            <div>
                                <label className="text-sm font-bold text-gray-600 block">Email</label>
                                <input 
                                    type="email" 
                                    value={email}
                                    onChange={(e) => setEmail(e.target.value)}
                                    className="w-full p-2 border border-gray-300 rounded mt-1"
                                    required 
                                />
                            </div>
                            <div>
                                <label className="text-sm font-bold text-gray-600 block">Password</label>
                                <input 
                                    type="password"
                                    value={password}
                                    onChange={(e) => setPassword(e.target.value)} 
                                    className="w-full p-2 border border-gray-300 rounded mt-1"
                                    required
                                />
                            </div>
                            <button type="submit" className="w-full py-2 px-4 bg-pink-500 hover:bg-pink-700 rounded-md text-white text-lg font-semibold">Login</button>
                        </form>
                    </div>
                </div>
            );
        }
        
        // --- App Component ---
        function App() {
            const { isAuthenticated, logout } = useAuth();
            
            return (
                <div>
                    {isAuthenticated ? (
                         <div className="container mx-auto p-4">
                            <header className="flex justify-between items-center mb-8">
                                <h1 className="text-4xl font-bold text-pink-800">The Sweet Shop</h1>
                                <button onClick={logout} className="bg-red-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-red-700">
                                    Logout
                                </button>
                            </header>
                            <Dashboard />
                        </div>
                    ) : (
                        <LoginPage />
                    )}
                </div>
            );
        }
        
        // --- Render App ---
        const container = document.getElementById('root');
        const root = ReactDOM.createRoot(container);
        root.render(
            <AuthProvider>
                <App />
            </AuthProvider>
        );
    </script>
</body>
</html>

